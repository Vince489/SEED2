<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Image to Color Quantization</title>
    <link rel="stylesheet" href="style.css">
</head>
<body>
  <h1>Simplify Image with Color Quantization</h1>
  
  <!-- Image Upload -->
  <input type="file" id="upload" accept="image/*">
  <canvas id="originalCanvas"></canvas>
  <canvas id="simplifiedCanvas"></canvas>
  
  <div class="controls">
    <div class="control-group">
        <label for="generationModel">Generation Model:</label>
        <select id="generationModel">
            <option value="single">Single</option>
            <option value="group">Group</option>
            <option value="custom">Custom</option>
        </select>
    </div>

    <div class="control-group">
        <label for="baseModelSelect">Select Base Model:</label>
        <select id="baseModelSelect">
            <option value="LP">Low Precision (LP)</option>
            <option value="MP">Medium Precision (MP)</option>
            <option value="MHP">Medium-High Precision (MHP)</option>
            <option value="HP">High Precision (HP)</option>
        </select>
    </div>
    
    <div class="control-group">
        <label for="samplerSelect">Select Sampler:</label>
        <select id="samplerSelect"></select>
    </div>

    <div class="control-group">
        <label for="pixelationSelect">Pixelation Level:</label>
        <select id="pixelationSelect">
            <option value="1">1 Pixel</option>
            <option value="2">2 Pixels</option>
            <option value="4">4 Pixels</option>
        </select>
    </div>

    <!-- Quantization Level -->    
    <div class="control-group">
        <label for="seedInput">Seed (leave empty for random):</label>
        <input type="text" id="seedInput">
        <button id="generate">Generate</button>
    </div>

    <div class="control-group">
        <button id="download">Download</button>
    </div>
    
    <div class="control-group">
        <label for="generatedSeed">Generated Seed:</label>
        <span id="generatedSeed">Randomly selected seed will appear here.</span>
    </div>
  </div>
  
  <!-- Loading indicator -->
  <div id="loadingIndicator" style="display: none;">Processing... Please wait.</div>

  <!-- JavaScript File -->
  <script>
    document.addEventListener('DOMContentLoaded', function () {
        let seed;
        let uploadedImage;
        let originalCtx;
        const worker = new Worker('quantizeWorker.js');

        // Event listeners
        document.getElementById('upload').addEventListener('change', handleImageUpload);
        document.getElementById('generate').addEventListener('click', processImage);
        document.getElementById('download').addEventListener('click', downloadImage);
        document.getElementById('baseModelSelect').addEventListener('change', updateSamplerOptions);

        // Populate sampler dropdown on page load
        updateSamplerOptions(); // Ensure samplers are populated at the beginning

        // Function to update the sampler dropdown based on selected base model
        function updateSamplerOptions() {
            const baseModel = document.getElementById('baseModelSelect').value;
            const samplerSelect = document.getElementById('samplerSelect');
            samplerSelect.innerHTML = ''; // Clear existing options

            let options = [];

            switch (baseModel) {
                case 'LP':
                    options = [2, 4, 6, 8, 10];
                    break;
                case 'MP':
                    options = [12, 14, 16, 18];
                    break;
                case 'MHP':
                    options = [20, 24, 28, 32];
                    break;
                case 'HP':
                    options = [48, 64, 96, 128];
                    break;
                default:
                    options = [];
            }

            // Add new options to the sampler select element
            options.forEach(option => {
                const optionElement = document.createElement('option');
                optionElement.value = option;
                optionElement.textContent = option;
                samplerSelect.appendChild(optionElement);
            });

            // Optionally select the first sampler by default
            if (options.length > 0) {
                samplerSelect.value = options[0];
            }
        }

        // Handle image upload
        function handleImageUpload(event) {
            const file = event.target.files[0];
            if (!file) return;

            const img = new Image();
            const reader = new FileReader();

            reader.onload = function (e) {
                img.src = e.target.result;
                img.onload = () => {
                    uploadedImage = img; // Save the loaded image for later processing
                    const originalCanvas = document.getElementById('originalCanvas');
                    originalCtx = originalCanvas.getContext('2d');

                    originalCanvas.width = img.width;
                    originalCanvas.height = img.height;
                    originalCtx.drawImage(img, 0, 0);
                };
            };

            reader.readAsDataURL(file);
        }

        // Generate a random seed
        function generateSeed() {
            return Math.floor(Math.random() * 1000000);
        }

        // Process image using the worker
        function processImage() {
            if (!uploadedImage) {
                alert("Please upload an image first!");
                return;
            }

            const loadingIndicator = document.getElementById('loadingIndicator');
            loadingIndicator.style.display = 'block';

            const simplifiedCanvas = document.getElementById('simplifiedCanvas');
            const simplifiedCtx = simplifiedCanvas.getContext('2d');
            const width = uploadedImage.width;
            const height = uploadedImage.height;

            const imageData = originalCtx.getImageData(0, 0, width, height);
            const pixels = [];
            for (let i = 0; i < imageData.data.length; i += 4) {
                pixels.push([imageData.data[i], imageData.data[i + 1], imageData.data[i + 2]]);
            }

            const k = parseInt(document.getElementById('samplerSelect').value);
            const seedInput = document.getElementById('seedInput').value.trim();
            seed = seedInput ? seedInput : generateSeed();
            document.getElementById('generatedSeed').textContent = seed;

            worker.postMessage({ pixels, k, seed });

            worker.onmessage = function (e) {
                const quantizedPixels = e.data;

                const quantizedData = simplifiedCtx.createImageData(width, height);
                for (let i = 0; i < quantizedPixels.length; i++) {
                    const [r, g, b] = quantizedPixels[i];
                    quantizedData.data[i * 4] = r;
                    quantizedData.data[i * 4 + 1] = g;
                    quantizedData.data[i * 4 + 2] = b;
                    quantizedData.data[i * 4 + 3] = 255;
                }

                simplifiedCanvas.width = width;
                simplifiedCanvas.height = height;
                simplifiedCtx.putImageData(quantizedData, 0, 0);
                loadingIndicator.style.display = 'none';
            };

            worker.onerror = function (error) {
                console.error('Error in worker:', error);
                loadingIndicator.style.display = 'none';
            };
        }

        // Download the quantized image
        function downloadImage() {
            const simplifiedCanvas = document.getElementById('simplifiedCanvas');
            const link = document.createElement('a');
            link.href = simplifiedCanvas.toDataURL('image/png');
            link.download = 'quantized-image.png';
            link.click();
        }
    });
</script>

</body>
</html>
